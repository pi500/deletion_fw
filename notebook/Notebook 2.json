{
	"name": "Notebook 2",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "mypool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "3f023a9d-7003-4f09-8da4-18547f7a0e56"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/7374728e-d82a-4420-8e42-c2f7ef16e4c3/resourceGroups/mygrp/providers/Microsoft.Synapse/workspaces/workspace7971/bigDataPools/mypool",
				"name": "mypool",
				"type": "Spark",
				"endpoint": "https://workspace7971.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/mypool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import re"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"source": [
					"import re\r\n",
					"file_path = f\"abfss://historical@myadls8434.dfs.core.windows.net/new/data_master.json\"\r\n",
					"# Read JSON file into an RDD\r\n",
					"json_rdd = sc.textFile(file_path)\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"# Combine JSON strings into a single JSON object or array\r\n",
					"# If an array is needed:\r\n",
					"json_array = \"[\" + ','.join(json_rdd.collect()) + \"]\"\r\n",
					"#print(json_array)\r\n",
					"modified_string = json_array[4:-4]\r\n",
					"modified_string = modified_string.replace(',},,{,', '}{')\r\n",
					"modified_string = modified_string.replace(',,', ',')\r\n",
					"#modified_string = '{'+modified_string+'}'\r\n",
					"#print(modified_string)\r\n",
					"split_string = modified_string.split('}{')\r\n",
					"#print(split_string)\r\n",
					"\r\n",
					"list_of_dicts = []\r\n",
					"for string_elem in split_string:\r\n",
					"    # Assuming the strings represent key-value pairs separated by commas\r\n",
					"    dict_elem = dict(item.split(':') for item in string_elem.split(','))\r\n",
					"    list_of_dicts.append(dict_elem)\r\n",
					"\r\n",
					"# Display the list of dictionaries\r\n",
					"#for d in list_of_dicts:\r\n",
					"    #print(d)\r\n",
					"\r\n",
					"#cleaned_list_of_dicts = [{k.strip('\"'): v.strip('\"') for k, v in d.items()} for d in list_of_dicts]\r\n",
					"cleaned_list_of_dicts = []\r\n",
					"for d in list_of_dicts:\r\n",
					"    cleaned_dict = {re.sub(r'[\"\\']', '', k): re.sub(r'[\"\\']', '', v) for k, v in d.items()}\r\n",
					"    cleaned_list_of_dicts.append(cleaned_dict)\r\n",
					"#for i in cleaned_list_of_dicts:\r\n",
					"    #print(i)\r\n",
					"\r\n",
					"df = spark.createDataFrame(cleaned_list_of_dicts)\r\n",
					"\r\n",
					"# Show the DataFrame\r\n",
					"df.show()\r\n",
					"\r\n",
					""
				],
				"execution_count": 3
			}
		]
	}
}